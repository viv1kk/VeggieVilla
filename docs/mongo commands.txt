$show dbs

$use 'dbname'

show collections --> tables inside database

db.dropDatabase() --> deletes database

``````````````````````````````````````````````

****************"users" -> collection names*******

db.users.insertOne(JSON OBJ)

db.users.find() --> returns all the records inside users collection

db.users..insertMany([JSON, JSON, ...])


db.users.find().limit(no. of records)
db.users.find().sort({name : 1}) --> sort by name in the objects
db.users.find().sort({name : -1}) --> sort by name in the objects in reverse order


db.users.find().skip(2) ---> skips the first 2 elements 
db.users.find({ name : "Vivek", age : 22 }, {name : 1, age : 1}) ---> the Second object tells which params to fetch from db
db.users.find({ name : "Vivek", age : 22 }, {name : 1, age : 1,  _id : 0}) ---> don't returns the ID of object


`````````````````````````````````````````````````
Complex Queries

db.users.find({name : {$eq : "Vivek"}}) ---> $eq = check for equality
db.users.find({name : {$neq : "Vivek"}}) ---> $neq = check for not equality 

$gte, $gt, $lt, $lte


db.users.find({name : {$in : ["Vivek", "ABC", "XYZ", ... ]}}) ---> $in = if value in the list.
db.users.find({name : {$nin : ["Vivek", "ABC", "XYZ", ... ]})} ---> $nin = if value not in the list.



db.users.find({age : { $exists : true }} ---> $exists = all the object having age property will be returned.

db.users.find({age : { age : {$gte : 20, $lte : 40}, name : "Vivek" }}) --- >age && name

db.users.find({ $and : [ { age : 26}, { name : "Vivek"}] }) ---> another way to perform AND on queries

db.users.find({ $or : [ { age : 26}, { name : "Vivek"}] }) ---> way to perform OR on queries

db.users.find({ $not : { { age : 26} }) ---> way to perform NOT on queries

db.users.find({ $expr : { $gt : ["$debt" , "$balance"] }}) --> debt and balance are two columns in the collection or and expr is used to create a expression by merging different queries



